// Crie uma função que receba dois argumentos e retorne a soma dos mesmos.
var u = 2
var va = 3

function soma (u, va){
	return u + va;
}

soma
>5

// Declare uma variável que receba a invocação da função criada acima, passando dois números quaisquer por ARGUMENTO, e somando `5` ao resultado retornado da função.

var mysoma = soma(2,3)+5

 
// Qual o valor atualizado dessa variável?

10

// Declare uma nova variável, sem valor.

var a

/*
Crie uma função que adicione um valor à variável criada acima, e retorne a string:
    O valor da variável agora é VALOR.
Onde VALOR é o novo valor da variável.
*/

function valor(){
	var a = 25;
	return 'o valor da variável agora é ' + a;

}


// Invoque a função criada acima.

valor()

// Qual o retorno da função? (Use comentários de bloco).

/*o valor da variável agora é: 25*/


/*
Crie uma função com as seguintes características:
1. A função deve receber 3 argumentos;
2. Se qualquer um dos três argumentos não estiverem preenchidos, a função deve retornar a string:
    Preencha todos os valores corretamente!
3. O retorno da função deve ser a multiplicação dos 3 argumentos, somando `2` ao resultado da multiplicação.
*/
?

function newfunc(a,b,c){
	if (a === undefined || b === undefined || c === undefined){
	return 'Preencha todos os valores corretamente';
	}else{
		return a * b * c + 2;
	}
}



/*caso esteja correto não é necessário o 'else' pois irá ignorar*/
/*strict equal - para teste de tipo no JS*/
/*teste de diferença !==*/
/*null precisa ser passado p a variável para ela ser*/



// Invoque a função criada acima, passando só dois números como argumento.
newfunc (2, 3);

// Qual o resultado da invocação acima? (Use comentários para mostrar o valor retornado).
?
'Preencha todos os valores corretamente!'

// Agora invoque novamente a função criada acima, mas passando todos os três argumentos necessários.
?
valor (2,3,4)

// Qual o resultado da invocação acima? (Use comentários para mostrar o valor retornado).
 = z ?
26

/*
Crie uma função com as seguintes características:
1. A função deve receber 3 argumentos.
2. Se somente um argumento for passado, retorne o valor do argumento.
3. Se dois argumentos forem passados, retorne a soma dos dois argumentos.
4. Se todos os argumentos forem passados, retorne a soma do primeiro com o segundo, e o resultado, dividido pelo terceiro.
5. Se nenhum argumento for passado, retorne o valor booleano `false`.
6. E ainda, se nenhuma das condições acima forem atendidas, retorne `null`.
*/
?

function tres(g,h,j){
    if(g !== undefined && h === undefined && j === undefined){
        return g;
    }else if(g !== undefined && h !== undefined && j === undefined){
        return g + h;
    }else if(g !== undefined && h !== undefined && j !== undefined){
        return (g + h) / j;
    }else if(g === undefined && h === undefined && j === undefined){
        return false;
    }
    }else{
	return null;
    }
}




// Invoque a função acima utilizando todas as possibilidades (com nenhum argumento, com um, com dois e com três.) Coloque um comentário de linha ao lado da função com o resultado de cada invocação.

tres();
>false

tres(); //false
>false

tres(1);
1

tres(1, 2);
>3

tres(1,2,3);
>1






